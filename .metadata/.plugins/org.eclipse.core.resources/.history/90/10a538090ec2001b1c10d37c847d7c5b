package com.kh.member.model.dao;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

import static com.kh.common.JDBCTemplate.*;
import com.kh.member.model.vo.Member;

public class MemberDao {
	
	private Properties prop = new Properties();
	
	public MemberDao() {
		
		String fileName = MemberDao.class.getResource("/sql/member/member-mapper.xml").getPath();
		
		try {
			prop.loadFromXML(new FileInputStream(fileName));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	// 로그인 요청 서비스
		public Member loginMember(Connection conn, String memId, String memPwd) {
		
		Member m = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		String sql = prop.getProperty("loginMember");
		
		try {
			pstmt = conn.prepareStatement(sql); // 미완성된 sql문
			
			pstmt.setString(1, memId);
			pstmt.setString(2, memPwd);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				m= new Member(rset.getInt("mem_no"),
							  rset.getString("mem_id"),
							  rset.getString("mem_pwd"),
							  rset.getString("mem_name"),
							  rset.getString("email"),
							  rset.getDate("enroll_date"),
							  rset.getString("status"),
							  rset.getInt("mem_code")); // 값이 있어야 맴버 객체를 생성함
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
			
		}
		
		return m;
				
	}
	
	/** 
	 * 회원가입용 서비스
	 */
		public int insertMember(Connection conn, Member m) {
			// insert문 => 처리된 행수 
			int result = 0;
			PreparedStatement pstmt = null;
			String sql = prop.getProperty("insertMember");
			
			try {
				pstmt=conn.prepareStatement(sql);
				
				pstmt.setString(1, m.getMemId());
				pstmt.setString(2, m.getMemPwd());
				pstmt.setString(3, m.getMemName());
				pstmt.setString(4, m.getEmail());
				
				result = pstmt.executeUpdate();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}finally {
				close(pstmt);
			}
			return result;
		}
	
	public int idCheck(Connection conn, String checkId) {
		// select문 => ResultSet(숫자 하나로 받아줘야함)
		int count = 0;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		String sql = prop.getProperty("idCheck");
		
		try {
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, checkId);
			
			rset=pstmt.executeQuery();
			
			if(rset.next()) {
				count = rset.getInt(1);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
		}
		
		return count;
	}

	/**
	 * ID찾기 용 DAO
	 */
	public Member searchMember(Connection conn, String memName, String email) {
			
			Member m = null;
			PreparedStatement pstmt = null;
			ResultSet rset = null;
			String sql = prop.getProperty("searchMember");
			
			try {
				pstmt = conn.prepareStatement(sql); // 미완성된 sql문
				
				pstmt.setString(1, memName);
				pstmt.setString(2, email);
				
				rset = pstmt.executeQuery();
				
				if(rset.next()) {
					m= new Member(rset.getInt("mem_no"),
								  rset.getString("mem_id"),
								  rset.getString("mem_pwd"),
								  rset.getString("mem_name"),
								  rset.getString("email"),
								  rset.getDate("enroll_date"),
								  rset.getString("status"),
								  rset.getInt("mem_code")); // 값이 있어야 맴버 객체를 생성함
				}
			
			} catch (SQLException e) {
				e.printStackTrace();
			}finally {
				close(rset);
				close(pstmt);
				
			}
			
			return m;
					
		}
	
	/**
	 * PWD찾기용 DAO
	 */
	public Member searchPwdMember(Connection conn, String memName, String email, String memId) {
		
		Member m = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		String sql = prop.getProperty("searchPwdMember");
		
		try {
			pstmt = conn.prepareStatement(sql); // 미완성된 sql문
			
			pstmt.setString(1, memName);
			pstmt.setString(2, email);
			pstmt.setString(3, memId);
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				m= new Member(rset.getInt("mem_no"),
							  rset.getString("mem_id"),
							  rset.getString("mem_pwd"),
							  rset.getString("mem_name"),
							  rset.getString("email"),
							  rset.getDate("enroll_date"),
							  rset.getString("status"),
							  rset.getInt("mem_code")); // 값이 있어야 맴버 객체를 생성함
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
			
		}
		
		return m;
				
	}
	
	
	/**비밀번호 변경 DAO
	 */
	public int changePwdMember(Connection conn, Member m) {
		// insert문 => 처리된 행수 
		int result = 0;
		PreparedStatement pstmt = null;
		String sql = prop.getProperty("changePwdMember");
		
		try {
			pstmt=conn.prepareStatement(sql);
			
			pstmt.setString(1, m.getMemPwd());
			pstmt.setString(2, m.getMemNo());
			
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(pstmt);
		}
		return result;
	}
	
}
